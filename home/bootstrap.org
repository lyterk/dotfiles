#+PROPERTY: header-args :tangle yes

* Utilities and Functions
** Convert a table of package names and versions to a shell command argument
Such as for pip or apt

#+NAME: table-to-versioned-string
#+BEGIN_SRC elisp :var table=apt-sources package-manager="apt" :results silent
(defun table-to-versioned-string (table package-manager)
  ;; Joiner assigns whether we should use $package=$version or $package==$version
  (let ((joiner
         (cond ((string= package-manager "apt") "=")
               ((string= package-manager "pip") "=="))))
    (s-join " " (-map (lambda (row)
            (let ((package (car row))
                  (version (format "%s" (cadr row))))
              (if (string= "" version)
                  package
                (s-concat package joiner version))))
          table))))

(message (table-to-versioned-string table package-manager))
#+END_SRC

* Packages
Run all as root.
** Apt
*** Base upgrades
#+BEGIN_SRC shell :dir "/sudo::"
apt update
apt upgrade
#+END_SRC

#+RESULTS:

*** Add repos
#+NAME: apt-repos
| name | comment |
|------+---------|
|      |         |


#+BEGIN_SRC shell :var sources=apt-repos :dir "/sudo::" :results output verbatim :tangle sudo_bootstrap.el
add-apt-repository $sources
apt update
#+END_SRC

*** Installs
#+NAME: apt-sources
| name             | version | comment                           |
|------------------+---------+-----------------------------------|
| curl             |         |                                   |
| gawk             |         | gnu awk, cause it's better        |
| wget             |         |                                   |
| xclip            |         |                                   |
| pass             |         |                                   |
| openvpn          |         |                                   |
| calibre          |         |                                   |
| htop             |         |                                   |
| jq               |         | Just critical                     |
| racket           |         |                                   |
| hunspell         |         |                                   |
| hunspell-en-us   |         |                                   |
| golang           |         | so hot right now                  |
| transmission     |         |                                   |
| mplayer          |         | nice sound playing                |
| paperkey         |         | backing up /restoring GPG keys    |
| emacs26          |         | requires ubuntu 19+               |
| cmake            |         | requires ubuntu 19+, for libvterm |
| libtool-bin      |         | for libvterm                      |
| fonts-firacode   |         | for doom emacs                    |
| zlib1g-dev       |         | for installing python w/ pyenv    |
| build-essential  |         | python + pyenv                    |
| libssl-dev       |         | python + pyenv                    |
| libbz2-dev       |         | python + pyenv                    |
| libreadline-dev  |         | python + pyenv                    |
| libsqlite3-dev   |         | python + pyenv                    |
| llvm             |         | python + pyenv                    |
| libncurses5-dev  |         | python + pyenv                    |
| libncursesw5-dev |         | python + pyenv                    |
| xz-utils         |         | python + pyenv                    |
| tk-dev           |         | python + pyenv                    |
| libffi-dev       |         | python + pyenv                    |
| liblzma-dev      |         | python + pyenv                    |
| python-openssl   |         | python + pyenv                    |

#+NAME: INSTALLATION
#+HEADER: :var vstring=table-to-versioned-string(table=apt-sources, package-manager="pip")
#+HEADER: :dir "/sudo::/"
#+HEADER: :results raw
#+BEGIN_SRC shell
# I could do this more nicely and cleanly with the Python API, but I prefer to
# be able to do this without dependencies-- this should work on a fresh ubuntu
# install.
apt-get install -y $(echo $vstring)
#+END_SRC

#+RESULTS: INSTALLATION
Reading package lists... 0%Reading package lists... 100%Reading package lists... Done
Building dependency tree... 0%Building dependency tree... 0%Building dependency tree... 50%Building dependency tree... 50%Building dependency tree... 75%Building dependency tree... 76%Building dependency tree... 77%Building dependency tree... 78%Building dependency tree... 79%Building dependency tree... 80%Building dependency tree... 81%Building dependency tree... 82%Building dependency tree... 83%Building dependency tree... 84%Building dependency tree... 85%Building dependency tree... 86%Building dependency tree... 87%Building dependency tree... 88%Building dependency tree... 89%Building dependency tree... 90%Building dependency tree... 91%Building dependency tree... 92%Building dependency tree... 93%Building dependency tree... 94%Building dependency tree... 95%Building dependency tree... 96%Building dependency tree... 97%Building dependency tree... 98%Building dependency tree... 99%Building dependency tree       
Reading state information... 0%Reading state information... 0%Reading state information... 0%Reading state information... 0%Reading state information... 1%Reading state information... 2%Reading state information... 3%Reading state information... 4%Reading state information... 5%Reading state information... 6%Reading state information... 7%Reading state information... 8%Reading state information... 9%Reading state information... 10%Reading state information... 11%Reading state information... 12%Reading state information... 13%Reading state information... 14%Reading state information... 15%Reading state information... 16%Reading state information... 17%Reading state information... 18%Reading state information... 19%Reading state information... 20%Reading state information... 21%Reading state information... 22%Reading state information... 23%Reading state information... 24%Reading state information... 25%Reading state information... 26%Reading state information... 27%Reading state information... 28%Reading state information... 29%Reading state information... 30%Reading state information... 31%Reading state information... 32%Reading state information... 33%Reading state information... 34%Reading state information... 35%Reading state information... 36%Reading state information... 37%Reading state information... 38%Reading state information... 39%Reading state information... 40%Reading state information... 41%Reading state information... 42%Reading state information... 43%Reading state information... 44%Reading state information... 45%Reading state information... 46%Reading state information... 47%Reading state information... 48%Reading state information... 49%Reading state information... 50%Reading state information... 51%Reading state information... 52%Reading state information... 53%Reading state information... 54%Reading state information... 55%Reading state information... 56%Reading state information... 57%Reading state information... 58%Reading state information... 59%Reading state information... 60%Reading state information... 61%Reading state information... 62%Reading state information... 63%Reading state information... 64%Reading state information... 65%Reading state information... 66%Reading state information... 67%Reading state information... 68%Reading state information... 69%Reading state information... 70%Reading state information... 71%Reading state information... 72%Reading state information... 73%Reading state information... 74%Reading state information... 75%Reading state information... 76%Reading state information... 77%Reading state information... 78%Reading state information... 79%Reading state information... 80%Reading state information... 81%Reading state information... 82%Reading state information... 83%Reading state information... 84%Reading state information... 85%Reading state information... 86%Reading state information... 87%Reading state information... 88%Reading state information... 89%Reading state information... 90%Reading state information... 91%Reading state information... 92%Reading state information... 93%Reading state information... 94%Reading state information... 95%Reading state information... 96%Reading state information... 97%Reading state information... 100%Reading state information... Done
build-essential is already the newest version (12.8ubuntu1).
cmake is already the newest version (3.13.4-1build1).
curl is already the newest version (7.65.3-1ubuntu3).
gawk is already the newest version (1:4.2.1+dfsg-1.1build1).
golang is already the newest version (2:1.12~1ubuntu1).
htop is already the newest version (2.2.0-2).
hunspell-en-us is already the newest version (1:2018.04.16-1).
libbz2-dev is already the newest version (1.0.6-9.2).
libffi-dev is already the newest version (3.2.1-9).
liblzma-dev is already the newest version (5.2.4-1).
libncurses5-dev is already the newest version (6.1+20190803-1ubuntu1).
libncursesw5-dev is already the newest version (6.1+20190803-1ubuntu1).
libreadline-dev is already the newest version (8.0-3).
libssl-dev is already the newest version (1.1.1c-1ubuntu4).
libtool-bin is already the newest version (2.4.6-11).
openvpn is already the newest version (2.4.7-1ubuntu2).
wget is already the newest version (1.20.3-1ubuntu1).
xz-utils is already the newest version (5.2.4-1).
zlib1g-dev is already the newest version (1:1.2.11.dfsg-1ubuntu3).
calibre is already the newest version (3.46.0+dfsg-1).
fonts-firacode is already the newest version (1.207+dfsg1-1).
hunspell is already the newest version (1.7.0-2build1).
jq is already the newest version (1.5+dfsg-2build1).
llvm is already the newest version (1:9.0-49~exp1).
mplayer is already the newest version (2:1.3.0-8build4).
paperkey is already the newest version (1.6-1).
pass is already the newest version (1.7.3-2).
python-openssl is already the newest version (19.0.0-1).
racket is already the newest version (7.2+dfsg1-2ubuntu2).
tk-dev is already the newest version (8.6.9+1).
transmission is already the newest version (2.94-2ubuntu1).
xclip is already the newest version (0.13-1).
libsqlite3-dev is already the newest version (3.29.0-2ubuntu0.2).
emacs26 is already the newest version (26.3~1.git96dd019-kk1+19.10).
0 upgraded, 0 newly installed, 0 to remove and 7 not upgraded.


*** Antibody
#+BEGIN_SRC shell :dir "/sudo::"
curl -sfL git.io/antibody | sh -s - -b /usr/local/bin
#+END_SRC
#+RESULTS:
** Compiled
Trans -- For translating stuff, seems to work pretty stably.
#+BEGIN_SRC shell
wget https://git.io/trans -O /tmp/trans
chmod u+x /tmp/trans
mv /tmp/trans $HOME/.local/bin
#+END_SRC

#+RESULTS:

* Shell
#+BEGIN_SRC shell
# NOTE You probably want to generate an SSH key for bitbucket for this machine.
git clone https://bitbucket.org/txru/passwords.git ~/.password-store
# NOTE You should fetch your GPG key yourself.
git clone https://bitbucket.org/txru/dotfiles.git ~/.dotfiles
python3 ~/.dotfiles/home/copier.py
#+END_SRC
* Emacs
#+BEGIN_SRC shell
git clone https://github.com/hlissner/doom-emacs ~/.emacs.d
yes | ~/.emacs.d/bin/doom install

mkdir -p ~/.emacs.d/.local/straight/repos/emacs-libvterm/build
cd ~/.emacs.d/.local/straight/repos/emacs-libvterm/build
cmake ..
make
cd -
#+END_SRC
#+END_SRC
* Python

** Create env
#+BEGIN_SRC elisp  :var location=(getenv "HOME")
(let* ((commands (list
                 (format "git clone https://github.com/pyenv/pyenv.git %s/.pyenv" location)
                 (format "git clone https://github.com/momo-lab/xxenv-latest.git %s/plugins/xxenv-latest"
                         (s-concat location "/.pyenv")
                 "pyenv latest install"
                 "pyenv global $(pyenv versions | tail -n 1)"
                 "mkdir -p $HOME/.zfunc")))
  (-map (lambda (command)
          (kev-command command))
        commands))
#+END_SRC
#+RESULTS:
| git clone https://github.com/pyenv/pyenv.git ~/.pyenv | 128 | fatal: destination path '/home/kev/.pyenv' already exists and is not an empty directory. |
| pyenv latest install                                  |   1 | Latest version is '3.8.2'                                                                |

** Install Libraries
#+NAME: general-purpose-python
| name                          | version | comment               |
|-------------------------------+---------+-----------------------|
| jupyter                       |   1.0.0 | science notebook      |
| black                         | 19.10b0 | formatting            |
| pyflakes                      |   2.2.0 | import optimization   |
| isort                         |  4.3.21 | sort imports          |
| mypy                          |   0.770 | typing                |
| 'python-language-server[all]' |  0.31.9 | LSP                   |
| pyls-mypy                     |   0.1.8 |                       |
| pyls-isort                    |   0.1.1 | isort                 |
| jedi                          |  0.17.0 | emacs python stuff    |
| ipython                       |  7.14.0 | repl                  |
| poetry                        |   1.0.5 | dependency management |
| virtualenv                    | 20.0.15 | envs                  |

#+BEGIN_SRC elisp :var table=general-purpose-python
(let* ((libraries (-map
                   (lambda (row)
                     (let ((package (car row))
                           (version (cadr row)))
                       (s-concat
                        package
                        (if (not (string= "" version))
                            (s-concat "==" version)
                          version))))
                   table)))
       (-map (lambda (lib)
               (kev-command (format "pip install --user %s" lib)))
             libraries))

#+END_SRC

#+RESULTS:




** Configure Shell
#+BEGIN_SRC elisp
(let ((commands (list "poetry completions zsh > ~/.zfunc/_poetry")))
  (-map (lambda (command)
          (kev-command command))
        commands))
#+END_SRC

* Node
#+BEGIN_SRC shell
source $HOME/.zshrc
curl -fsSL https://raw.githubusercontent.com/nodenv/nodenv-installer/master/bin/nodenv-installer | bash

# Holy fuck I hate the Nodesystem
git clone https://github.com/momo-lab/xxenv-latest.git "$(nodenv root)"/plugins/xxenv-latest
# Fuck everything about node
nodenv latest install

nodenv global $(nodenv versions | tail -n 1)

npm install --global prettier
#+END_SRC

* Rust
#+BEGIN_SRC zsh
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source ~/.cargo/env

rustup toolchain add nightly
rustup component add rust-src
rustup component add clippy

cargo +nightly install racer
cargo install ripgrep

# Rust analyzer installation (because VS Code wants us to suffer)
# Requires:
# * Cargo
# * NodeJS
# * NPM
# * rust-src
git clone https://github.com/rust-analyzer/rust-analyzer.git /tmp/rust-analyzer
cd /tmp/rust-analyzer
cargo xtask install
#+END_SRC

#+RESULTS:

* Snap
#+BEGIN_SRC shell :dir "/sudo::"
snap install signal-desktop
snap install spotify
snap install bitwise
snap install chromium
#+END_SRC

#+RESULTS:

* KDE
#+BEGIN_SRC shell
file=RjGYtZL.jpg
pretty_name="susquehanna_park.jpg"
output_file="$HOME/Pictures/$pretty_name"
wget https://i.imgur.com/$file -O $output_file


dbus-send --session --dest=org.kde.plasmashell --type=method_call /PlasmaShell org.kde.PlasmaShell.evaluateScript 'string:
var Desktops = desktops();
for (i=0;i<Desktops.length;i++) {
        d = Desktops[i];
        d.wallpaperPlugin = "org.kde.image";
        d.currentConfigGroup = Array("Wallpaper",
                                    "org.kde.image",
                                    "General");
        d.writeConfig("Image", "file:/$output_file");

        console.log("$output_file");
}'

file=DCIcWc6.jpg
pretty_name="brothers_ruel.jpg"
output_file="$HOME/Pictures/$pretty_name"
wget https://i.imgur.com/$file -O $output_file
#+END_SRC

#+RESULTS:
* Dotfiles
#+NAME: dotfiles
| filename                  | file_location                            | comment |
|---------------------------+------------------------------------------+---------|
| spacemacs                 | ~/.spacemacs                             |         |
| config                    | ~/.ssh/config                            |         |
| config.fish               | ~/.config/fish/config.fish               |         |
| gitconfig                 | ~/.gitconfig                             |         |
| gitignore                 | ~/.gitignore                             |         |
| pip.conf                  | ~/.pip/pip.conf                          |         |
| kdewalletrc               | ~/.config/kdewalletrc                    |         |
| redshift.conf             | ~/.config/redshift.conf                  |         |
| flake8                    | ~/.config/flake8                         |         |
| rustfmt.toml              | ~/.config/rustfmt/rustfmt.toml           |         |
| zshenv                    | ~/.zshenv                                |         |
| zshrc                     | ~/.zshrc                                 |         |
| profile                   | ~/.profile                               |         |
| zprofile                  | ~/.zprofile                              |         |
| systemd/emacs.service     | ~/.config/systemd/user/emacs.service     |         |
| systemd/gitwatch@.service | ~/.config/systemd/user/gitwatch@.service |         |

#+BEGIN_SRC python :var table=dotfiles :tangle "copier.py"
from pathlib import Path

home = Path.home()
dotfiles_path = home / ".dotfiles" / "home"


def firefox_settings():
    import configparser

    firefox_ini = str(home / ".mozilla" / "firefox" / "profiles.ini")

    profiles = configparser.ConfigParser()
    profiles.read(firefox_ini)

    firefox_profile_paths = []
    for k, v in profiles.items():
        if "Profile" in k:
            firefox_profile_paths.append(v.get("Path"))

    for profile_key, profile in profiles.items():
        if "Profile" in profile_key:
            firefox_profile = (
                home / ".mozilla" / "firefox" / profile.get("Path") / "chrome"
            )
            firefox_profile.mkdir(parents=True, exist_ok=True)

            try:
                (firefox_profile / "userChrome.css").symlink_to(
                    dotfiles_path / "browser" / "userChrome.css"
                )
            except FileExistsError:
                pass

            print(f"Copied Firefox profile {profile.get('Path')}")


doom_source = dotfiles_path / "doom.d"
doom_destination = home / ".doom.d"


firefox_settings()

for file in doom_source.iterdir():
    try:
        (doom_destination / file.name).symlink_to(doom_source / file.name)
        print(doom_destination / file.name)
    except:
        (doom_destination / file.name).unlink()
        (doom_destination / file.name).symlink_to(doom_source / file.name)
        print(doom_destination / file.name)

file_mappings = {(dotfiles_path / row[0]): Path(row[1]).expanduser() for row in table }

for source, target in file_mappings.items():
    print(target)
    try:
        try:
            target.unlink()
        except:
            pass
        target.parent.mkdir(parents=True, exist_ok=True)
        target.symlink_to(source)
    except Exception as exc:
        print(exc)

#+END_SRC

#+RESULTS:
: None

* Config
* Scripts
** Gitwatch
#+BEGIN_SRC shell :dir "/sudo::" :var directory=(substitute-in-file-name "$HOME/.dotfiles/home/")
ln -s $directory/scripts/gitwatch.sh /usr/local/bin/gitwatch
#+END_SRC
#+RESULTS:
