#+PROPERTY: header-args :tangle yes

* Utilities and Functions
** Convert a table of package names and versions to a shell command argument
Such as for pip or apt

#+NAME: table-to-versioned-string
#+BEGIN_SRC elisp :var table=apt-sources package-manager="apt" :results silent
(defun table-to-versioned-string (table package-manager)
  ;; Joiner assigns whether we should use $package=$version or $package==$version
  (let ((joiner
         (cond ((string= package-manager "apt") "=")
               ((string= package-manager "pip") "=="))))
    (s-join " " (-map (lambda (row)
            (let ((package (car row))
                  (version (format "%s" (cadr row))))
              (if (string= "" version)
                  package
                (s-concat package joiner version))))
          table))))

(message (table-to-versioned-string table package-manager))
#+END_SRC

* Shell
#+BEGIN_SRC shell
# NOTE You probably want to generate an SSH key for bitbucket for this machine.
git clone https://bitbucket.org/txru/passwords.git ~/.password-store
# NOTE You should fetch your GPG key yourself.
git clone https://bitbucket.org/txru/dotfiles.git ~/.dotfiles
python3 ~/.dotfiles/home/copier.py
#+END_SRC
* Python

** Install Libraries
#+NAME: general-purpose-python
| name                          | version | comment               |
|-------------------------------+---------+-----------------------|
| jupyter                       |   1.0.0 | science notebook      |
| black                         | 19.10b0 | formatting            |
| pyflakes                      |   2.2.0 | import optimization   |
| isort                         |  4.3.21 | sort imports          |
| mypy                          |   0.770 | typing                |
| 'python-language-server[all]' |  0.31.9 | LSP                   |
| pyls-mypy                     |   0.1.8 |                       |
| pyls-isort                    |   0.1.1 | isort                 |
| jedi                          |  0.17.0 | emacs python stuff    |
| ipython                       |  7.14.0 | repl                  |
| poetry                        |   1.0.5 | dependency management |
| virtualenv                    | 20.0.15 | envs                  |

#+BEGIN_SRC elisp :var table=general-purpose-python
(let* ((libraries (-map
                   (lambda (row)
                     (let ((package (car row))
                           (version (cadr row)))
                       (s-concat
                        package
                        (if (not (string= "" version))
                            (s-concat "==" version)
                          version))))
                   table)))
       (-map (lambda (lib)
               (kev-command (format "pip install --user %s" lib)))
             libraries))

#+END_SRC

#+RESULTS:




* Dotfiles
#+NAME: dotfiles
| filename                  | file_location                            | comment |
|---------------------------+------------------------------------------+---------|
| ssh_config                | ~/.ssh/config                            |         |
| gitconfig                 | ~/.gitconfig                             |         |
| gitignore                 | ~/.gitignore                             |         |
| pip.conf                  | ~/.pip/pip.conf                          |         |
| kdewalletrc               | ~/.config/kdewalletrc                    |         |
| redshift.conf             | ~/.config/redshift.conf                  |         |
| flake8                    | ~/.config/flake8                         |         |
| rustfmt.toml              | ~/.config/rustfmt/rustfmt.toml           |         |
| zshenv                    | ~/.zshenv                                |         |
| zshrc                     | ~/.zshrc                                 |         |
| profile                   | ~/.profile                               |         |
| fish/config.fish          | ~/.config/fish/config.fish               |         |
| zprofile                  | ~/.zprofile                              |         |

#+BEGIN_SRC python :var table=dotfiles :tangle "copier.py"
from pathlib import Path

home = Path.home()
dotfiles_path = home / "dotfiles" / "home"


def firefox_settings():
    import configparser

    firefox_ini = str(home / ".mozilla" / "firefox" / "profiles.ini")

    profiles = configparser.ConfigParser()
    profiles.read(firefox_ini)

    firefox_profile_paths = []
    for k, v in profiles.items():
        if "Profile" in k:
            firefox_profile_paths.append(v.get("Path"))

    for profile_key, profile in profiles.items():
        if "Profile" in profile_key:
            firefox_profile = (
                home / ".mozilla" / "firefox" / profile.get("Path") / "chrome"
            )
            firefox_profile.mkdir(parents=True, exist_ok=True)

            try:
                (firefox_profile / "userChrome.css").symlink_to(
                    dotfiles_path / "browser" / "userChrome.css"
                )
            except FileExistsError:
                pass

            print(f"Copied Firefox profile {profile.get('Path')}")

firefox_settings()

file_mappings = {(dotfiles_path / row[0]): Path(row[1]).expanduser() for row in table }

for source, target in file_mappings.items():
    print(target)
    try:
        try:
            target.unlink()
        except:
            pass
        target.parent.mkdir(parents=True, exist_ok=True)
        target.symlink_to(source)
    except Exception as exc:
        print(exc)

for func in (dotfiles_path / "fish/functions").glob("*"):
    target = home / ".config/fish/functions" / func.name
    try:
        target.unlink()
    except:
        pass
    target.parent.mkdir(parents=True, exist_ok=True)
    target.symlink_to(func)

#+END_SRC

#+RESULTS:
: None

* Config
* Scripts
** Remarkable lines file to SVG
#+BEGIN_SRC python :var dotfiles_dir=(s-concat (getenv "HOME") "/.dotfiles/home")
import os
import requests

outfile = os.path.expanduser("~/.dotfiles/home/scripts/rm2svg")

url = "https://github.com/reHackable/maxio/raw/master/tools/rM2svg"
response = requests.get(url).text

try:
    with open(outfile, "w") as f:
        f.write(response)
except Exception as e:
    print(e)
#+END_SRC

#+RESULTS:
: None
