#+TITLE: Config
#+PROPERTY: header-args :tangle yes

Here are some additional functions/macros that could help you configure Doom:

- [[elisp:(find-function 'load!)][load!]] for loading external *.el files relative to this one
- [[elisp:(find-function 'use-package)][use-package]] for configuring packages
- [[elisp:(find-function 'after!)][after!]] for running code after a package has loaded
- [[elisp:(find-function 'add-load-path!)][add-load-path!]] for adding directories to the `load-path', where Emacs
  looks when you load packages with `require' or `use-package'.
- [[elisp:(find-function 'map!)][map!]] for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
they are implemented.

* Locations and Addresses

#+BEGIN_SRC elisp
;; Place your private configuration here! Remember, you do not need to run 'doom
;; refresh' after modifying this file!
(defun home (&rest path)
  (string-join (append (list (getenv "HOME")) path) "/"))

(setq doom-private-dir (home ".dotfiles/home/doom.d"))

;; If you intend to use org, it is recommended you change this!
(setq org-directory "~/org/")

;; username and email are used for a number of things, particularly for GPG configuration,
;; some email clients, file templates and snippets.
(setq user-full-name "Kevin Lyter"
      user-mail-address "lyterk@fastmail.com")
#+END_SRC

* Fonts and appearance
#+BEGIN_SRC elisp
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12))
(setq doom-font (font-spec :family "Fira Code" :size 12))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. These are the defaults.
(setq doom-theme 'doom-one)

;; If you want to change the style of line numbers, change this to `relative' or
;; `nil' to disable it:
(setq display-line-numbers-type t)

;; Transparency
(set-frame-parameter (selected-frame) 'alpha '90)
(add-to-list 'default-frame-alist '(alpha . 90))

;; Whitespace
(setq global-whitespace-mode nil)
#+END_SRC

** Alert
#+BEGIN_SRC elisp
(setq alert-default-style 'libnotify)
(setq alert-libnotify-command "/usr/bin/notify-send")
#+END_SRC

#+RESULTS:
: /usr/bin/notify-send
* Dired
** Put me in filter mode automatically
#+BEGIN_SRC elisp
(add-hook! 'dired-mode 'dired-filter-mode)
#+END_SRC
** Don't ask to recursively delete
#+BEGIN_SRC elisp

(setq dired-recursive-deletes 'always)
#+END_SRC

* Evil navigation
#+BEGIN_SRC elisp
;; Evil stuff
(setq evil-escape-key-sequence "cg")

;; Indentation
(define-key indent-rigidly-map "h" 'indent-rigidly-left)
(define-key indent-rigidly-map "l" 'indent-rigidly-right)
(define-key indent-rigidly-map "H" 'indent-rigidly-left-to-tab-stop)
(define-key indent-rigidly-map "L" 'indent-rigidly-right-to-tab-stop)
#+END_SRC

* Org
** Basic
#+BEGIN_SRC elisp
(setq org-log-done 'time)
#+END_SRC

#+RESULTS:
: time

** Pomodoro
#+BEGIN_SRC elisp
;; Pomodoro
(setq org-pomodoro-audio-player "mplayer")
(setq org-pomodoro-finished-sound-args "-volume 40")
(setq org-pomodoro-long-break-sound-args "-volume 40")
(setq org-pomodoro-short-break-sound-args "-volume 40")
#+END_SRC
** Capture
#+BEGIN_SRC elisp
  (setq org-capture-templates
        '(("t" "Personal todo" entry
           (file+headline +org-capture-todo-file "Inbox")
           "* TODO %?\n%i\n%a" :prepend t)
          ("n" "Personal notes" entry
           (file+headline +org-capture-notes-file "Inbox")
           "* %u %?\n%i\n%a" :prepend t)
          ("j" "Journal" entry
           (file+olp+datetree +org-capture-journal-file)
           "* %U %?\n%i\n%a" :prepend t)

          ;; Will use {project-root}/{todo,notes,changelog}.org, unless a
          ;; {todo,notes,changelog}.org file is found in a parent directory.
          ;; Uses the basename from `+org-capture-todo-file',
          ;; `+org-capture-changelog-file' and `+org-capture-notes-file'.
          ("p" "Templates for projects")
          ("pt" "Project-local todo" entry  ; {project-root}/todo.org
           (file+headline +org-capture-project-todo-file "Inbox")
           "* TODO %?\n%i\n%a" :prepend t)
          ("pn" "Project-local notes" entry  ; {project-root}/notes.org
           (file+headline +org-capture-project-notes-file "Inbox")
           "* %U %?\n%i\n%a" :prepend t)
          ("pc" "Project-local changelog" entry  ; {project-root}/changelog.org
           (file+headline +org-capture-project-changelog-file "Unreleased")
           "* %U %?\n%i\n%a" :prepend t)

          ;; Will use {org-directory}/{+org-capture-projects-file} and store
          ;; these under {ProjectName}/{Tasks,Notes,Changelog} headings. They
          ;; support `:parents' to specify what headings to put them under, e.g.
          ;; :parents ("Projects")
          ("o" "Centralized templates for projects")
          ("ot" "Project todo" entry
           (function +org-capture-central-project-todo-file)
           "* TODO %?\n %i\n %a"
           :heading "Tasks"
           :prepend nil)
          ("on" "Project notes" entry
           (function +org-capture-central-project-notes-file)
           "* %U %?\n %i\n %a"
           :heading "Notes"
           :prepend t)
          ("oc" "Project changelog" entry
           (function +org-capture-central-project-changelog-file)
           "* %U %?\n %i\n %a"
           :heading "Changelog"
           :prepend t)))
#+END_SRC
** Elfeed
#+BEGIN_SRC elisp
(setq rmh-elfeed-org-files (list "~/org/feeds.org"))
#+END_SRC

* Debugger
* Python
#+BEGIN_SRC elisp
(setq python-shell-interpreter "ipython")

(after! python
  (set-popup-rule! "^\\*Python\\*$" :quit nil :ttl nil))
#+END_SRC
* Rust
#+BEGIN_SRC elisp
(setq racer-rust-src-path (home ".rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src"))
;; Apparently this is better and the future.
(setq rustic-lsp-server 'rust-analyzer)
#+END_SRC

* Viz
#+BEGIN_SRC elisp
(setq plantuml-jar-path "/usr/share/plantuml/plantuml.jar")
(setq org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar")
#+END_SRC
* Projectile
#+BEGIN_SRC elisp

#+END_SRC
* Flycheck
#+BEGIN_SRC elisp
(setq flycheck-checkers
  '(clj-kondo-edn
clj-kondo-cljc
clj-kondo-cljs
clj-kondo-clj
ada-gnat
asciidoctor
asciidoc
awk-gawk
bazel-buildifier
c/c++-clang
c/c++-gcc
c/c++-cppcheck
cfengine
chef-foodcritic
coffee
coffee-coffeelint
coq
css-csslint
css-stylelint
cuda-nvcc
cwl
d-dmd
dockerfile-hadolint
elixir-credo
emacs-lisp
emacs-lisp-checkdoc
ember-template
erlang-rebar3
erlang
eruby-erubis
eruby-ruumba
fortran-gfortran
go-gofmt
go-golint
go-vet
go-build
go-test
go-errcheck
go-unconvert
go-staticcheck
groovy
haml
handlebars
haskell-stack-ghc
haskell-ghc
haskell-hlint
html-tidy
javascript-eslint
javascript-jshint
javascript-standard
json-jsonlint
json-python-json
json-jq
jsonnet
less
less-stylelint
llvm-llc
lua-luacheck
lua
markdown-markdownlint-cli
markdown-mdl
nix
nix-linter
opam
perl
perl-perlcritic
php
php-phpmd
php-phpcs
processing
proselint
protobuf-protoc
protobuf-prototool
pug
puppet-parser
puppet-lint
python-pycompile
python-mypy
r-lintr
racket
rpm-rpmlint
rst-sphinx
rst
ruby-rubocop
ruby-standard
ruby-reek
ruby-rubylint
ruby
ruby-jruby
rust-cargo
rust
rust-clippy
scala
scala-scalastyle
scheme-chicken
scss-lint
scss-stylelint
sass/scss-sass-lint
sass
scss
sh-bash
sh-posix-dash
sh-posix-bash
sh-zsh
sh-shellcheck
slim
slim-lint
sql-sqlint
systemd-analyze
tcl-nagelfar
terraform
terraform-tflint
tex-chktex
tex-lacheck
texinfo
textlint
typescript-tslint
verilog-verilator
vhdl-ghdl
xml-xmlstarlet
xml-xmllint
yaml-jsyaml
yaml-ruby
yaml-yamllint))
#+END_SRC

* Macros
** Language stuff
#+BEGIN_SRC elisp
(fset 'kev/remove-properties
   (lambda (&optional arg)
     "Remove the next properties thing from the next location down."
     (interactive "p")
     (kmacro-exec-ring-item
      (quote ([47 94 92 42 33554464 73 116 101 109 32 return 106 100 100 112 106 100 100 107 107 107 112] 0 "%d")) arg)))

(fset 'kev/swap-org-translations
   (lambda (&optional arg)
     "Switch between language 1 and language 2, essentially."
     (interactive "p")
     (kmacro-exec-ring-item
      (quote ("njddpjddkkkpj" 0 "%d")) arg)))
#+END_SRC

* Load Files
#+BEGIN_SRC elisp
(load! "bindings")
(load! "functions")
#+END_SRC
